{"version":3,"sources":["components/Counter.tsx","components/User.tsx","components/Timer.tsx","components/TimerPadre.tsx","components/CounterReducer.tsx","components/Formulario.tsx","hooks/useForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","useState","counter","setCounter","increment","num","className","onClick","User","user","setUser","uid","name","JSON","stringify","Timer","miliseconds","seconds","setSeconds","ref","useRef","useEffect","current","clearInterval","setInterval","s","TimerPadre","setMiliseconds","initialState","counterReducer","state","action","type","payload","CounterRed","useReducer","dispatch","Formulario","formulario","setFormulario","handleInputChange","target","value","useForm","email","edad","autoComplete","htmlFor","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b468dcce.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\n\r\nconst Counter = () => {\r\n\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    const increment = ( num: number = 1 ): void => {\r\n        setCounter( counter + num );\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <h3>Counter</h3>\r\n            <span>{counter}</span>\r\n            <br />\r\n            <button className=\"btn btn-outline-primary mt-2\" onClick={ () => increment() }>+1</button>\r\n            <button className=\"btn btn-outline-primary mt-2\" onClick={ () => increment(2) }>+2</button>\r\n            <button className=\"btn btn-outline-danger mt-2\" onClick={ () => setCounter(0) }>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter\r\n","import { useState } from 'react';\r\n\r\ninterface Users {\r\n    uid: string;\r\n    name: string;\r\n}\r\n\r\nconst User = () => {\r\n\r\n    const [user, setUser] = useState<Users>();\r\n\r\n    const login = () => {\r\n        setUser({\r\n            uid: '123asd',\r\n            name: \"Leandro\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <h3>Usuario</h3>\r\n\r\n            <button className=\"btn btn-outline-primary\" onClick={login}>Login</button>\r\n\r\n            {\r\n                !user\r\n                ? <pre>No users</pre>\r\n                : <pre>{JSON.stringify(user)}</pre>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import { useRef } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\n\r\ntype TimerArgs = {\r\n    miliseconds: number\r\n}\r\n\r\nconst Timer = ( { miliseconds }: TimerArgs ) => {\r\n\r\n    const [seconds, setSeconds] = useState(0);\r\n\r\n    const ref = useRef<NodeJS.Timeout>();\r\n\r\n    useEffect(() => {\r\n        ref.current && clearInterval( ref.current )\r\n\r\n        ref.current = setInterval(() => setSeconds( s => s + 1 ) , miliseconds );\r\n    }, [miliseconds])\r\n\r\n    return (\r\n        <>\r\n            <h4>Timer: <small>{ seconds }</small></h4>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import { useState } from \"react\"\r\nimport Timer from \"./Timer\"\r\n\r\n\r\nconst TimerPadre = () => {\r\n\r\n    const [miliseconds, setMiliseconds] = useState(1000);\r\n\r\n    return (\r\n        <>\r\n            <span>Milisegundos {miliseconds}</span>\r\n\r\n            <br />\r\n\r\n            <button className=\"btn btn-outline-success\" onClick={ () =>setMiliseconds(1000) }>1000</button>\r\n            <button className=\"btn btn-outline-success\" onClick={ () =>setMiliseconds(2000) }>2000</button>\r\n\r\n            <Timer miliseconds={miliseconds} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TimerPadre\r\n","import { useReducer } from \"react\"\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n}\r\n\r\ntype ActionType = | { type: 'increment' } | { type: 'decrement' } | { type: 'custom', payload: number };\r\n\r\nconst counterReducer = ( state: typeof initialState, action:  ActionType) => {\r\n    switch (action.type) {\r\n        case 'increment':\r\n            \r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            }\r\n        \r\n        case 'decrement':\r\n            \r\n            return {\r\n                ...state,\r\n                counter: state.counter - 1\r\n            }\r\n        \r\n        case 'custom':\r\n            \r\n            return {\r\n                ...state,\r\n                counter: action.payload,\r\n            }\r\n    \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst CounterRed = () => {\r\n\r\n    const [{ counter }, dispatch] = useReducer(counterReducer, initialState);\r\n\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <h2>Counter: { counter }</h2>\r\n            <button\r\n                className=\"btn btn-outline-primary\"\r\n                onClick={\r\n                    () => dispatch({\r\n                    type: 'increment'\r\n                })\r\n            }\r\n            >\r\n                +1\r\n            </button>\r\n            \r\n            <button\r\n                className=\"btn btn-outline-primary\"\r\n                onClick={\r\n                    () => dispatch({\r\n                    type: 'decrement'\r\n                })\r\n            }\r\n            >\r\n                -1\r\n            </button>\r\n            \r\n            <button\r\n                className=\"btn btn-outline-danger\"\r\n                onClick={\r\n                    () => dispatch({\r\n                    type: 'custom',\r\n                    payload: 100\r\n                })\r\n            }\r\n            >\r\n                100\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterRed\r\n","import { useForm } from '../hooks/useForm';\r\n\r\ninterface FormData {\r\n    email: string,\r\n    name: string,\r\n    edad: number\r\n}\r\n\r\nconst Formulario = () => {\r\n\r\n    const { email, name, edad, formulario, handleInputChange } = useForm<FormData>({\r\n        email: '', name: '', edad: 21\r\n    });\r\n\r\n    // const { email, name, edad } = formulario\r\n\r\n    return (\r\n        <form autoComplete=\"off\">\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"Email\" className=\"form-label\">Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={handleInputChange}\r\n                    />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"Name\" className=\"form-label\">Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"Edad\" className=\"form-label\">Edad</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    name=\"edad\"\r\n                    value={edad}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n\r\n            <pre>{ JSON.stringify(formulario) }</pre>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","import { ChangeEvent, useState } from 'react'\r\n\r\nexport const useForm = <T extends Object>( initialState: T ) => {\r\n    const [formulario, setFormulario] = useState(initialState);\r\n\r\n    const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = target;\r\n    \r\n        setFormulario({...formulario, [name]:value})\r\n    }\r\n\r\n    return {\r\n        formulario,\r\n        handleInputChange,\r\n        ...formulario\r\n    }\r\n}\r\n","import Counter from \"./components/Counter\";\nimport User from \"./components/User\";\n\nimport TimerPadre from \"./components/TimerPadre\";\n\nimport CounterRed from \"./components/CounterReducer\";\n\nimport Formulario from \"./components/Formulario\";\n\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"mt-5\">React + Typescript</h1>\n      <hr />\n\n      <h2>useState</h2>\n      <hr />\n      <Counter />\n      <User />\n\n      <h2 className=\"mt-5\">useEffect - useRef</h2>\n      <hr />\n      <TimerPadre />\n\n      <h2 className=\"mt-5\">useReducer</h2>\n      <hr />\n      <CounterRed />\n\n      <h2 className=\"mt-5\">customHooks</h2>\n      <hr />\n      <Formulario />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}